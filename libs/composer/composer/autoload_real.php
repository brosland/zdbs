<?php

// autoload_real.php generated by Composer

<<<<<<< HEAD
class ComposerAutoloaderInit88565e0a692d343dfadc0286ee17bf8c
=======
class ComposerAutoloaderInit701f5eab6f71f5fdbe2aced9995733b9
>>>>>>> 30fa21622c3fe3eaca4f060f3bdc6d3ca13edd15
{
    private static $loader;

    public static function loadClassLoader($class)
    {
        if ('Composer\Autoload\ClassLoader' === $class) {
            require __DIR__ . '/ClassLoader.php';
        }
    }

    public static function getLoader()
    {
        if (null !== self::$loader) {
            return self::$loader;
        }

<<<<<<< HEAD
        spl_autoload_register(array('ComposerAutoloaderInit88565e0a692d343dfadc0286ee17bf8c', 'loadClassLoader'), true, true);
        self::$loader = $loader = new \Composer\Autoload\ClassLoader();
        spl_autoload_unregister(array('ComposerAutoloaderInit88565e0a692d343dfadc0286ee17bf8c', 'loadClassLoader'));
=======
        spl_autoload_register(array('ComposerAutoloaderInit701f5eab6f71f5fdbe2aced9995733b9', 'loadClassLoader'), true, true);
        self::$loader = $loader = new \Composer\Autoload\ClassLoader();
        spl_autoload_unregister(array('ComposerAutoloaderInit701f5eab6f71f5fdbe2aced9995733b9', 'loadClassLoader'));
>>>>>>> 30fa21622c3fe3eaca4f060f3bdc6d3ca13edd15

        $vendorDir = dirname(__DIR__);
        $baseDir = dirname(dirname($vendorDir));

        $map = require __DIR__ . '/autoload_namespaces.php';
        foreach ($map as $namespace => $path) {
            $loader->set($namespace, $path);
        }

        $classMap = require __DIR__ . '/autoload_classmap.php';
        if ($classMap) {
            $loader->addClassMap($classMap);
        }

        $loader->register(true);

        require $vendorDir . '/nette/nette/Nette/loader.php';
        require $vendorDir . '/kdyby/events/src/Doctrine/compatibility.php';

        return $loader;
    }
}
